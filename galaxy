const express = require('express');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const app = express();
app.use(express.json());
// Database connection 
const users = [];
// JWT secret key
const secret key = 'your-secret-key';
//signup endpoint
app.post('/api/signup',async(req,res) =>{
try{
//Extract user data from request body 
const{name,email,password}=req.body;
//Check if user with the same email alreay exists
const existing User = users.find((user)=>user.email === email);
if(existingUser) {
return res.status(409).json({message:'Use already exists'});
}
//Hash the user's password 
const hashedPassword = await bcrypt.hash(password,10);
//Create new user object with the hashed password
const user = {
name,
email,
password:hashedPassword,
};
//Add new user to database
users.push(user);
//Create JWT with user ID as payload 
const token = jwt.sign({id:user.email},secretKey);
//Send JWT to client 
return res.json({token});
}catch(error) {
console.error(error);
return res.status(500).json({message:'Server error'});
}
});
//Login endpoint
app.post('/api/login',async(req, res) => {
try{
//Extract user data from request body
const{email, password} = req.body;
user.email === email);
if(!user){
return res.status(401).json({message:'invalid credentials'});
}
//Compare password with the hashed password
const passwordMatch = await bcrypt.compare(password, user,password);
if(!passwordMatch) {
return res.status(401).json({message:'invalid credentials'});
}
//Create JWT with user ID as payload 
const token = jwt.sign({id:user.email},secretKey);
//Send JWY to client
return res.json({token});
}catch(error) {
console.error(error);
return res.status(500).json({message:'server error'});
}
});
// Check-auth endpoint
app.get('/api/check-auth',(req, res) =>{
try{
//Extraxt JWT from request headers 
const token = req.headers.authorization.split('')[1];
// Verify JWT
const decodedToken = jwt.verify(token,aecretKey);
//if varification succeeds, send 200 status code to client
return res.sendStatus(200);
}catch(error) {
console.error(error)'
return res.status(401).json({message: 'Invalid token'});
}
});
//server setup
const port = 3000;
app.listen(port, () => console.log('Server listening on port ${port}'));


